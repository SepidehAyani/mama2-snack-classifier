# A very basic example config file configuring only the essential elements to
# run a decision forest-based application.

# It's possible to specify reusable values:
kafka-brokers = "<example>:9092"
zk-servers = "<example>:2181"
hdfs-base = "hdfs:///user/<example>/oryx-cereal-classifier"

oryx {
  id = "RDFExample"
  input-topic {
    broker = ${kafka-brokers}
    lock = {
      master = ${zk-servers}
    }
    message = {
      topic = "OryxInput1"
    }
  }
  update-topic {
    broker = ${kafka-brokers}
    lock = {
      master = ${zk-servers}
    }
    message = {
      topic = "OryxUpdate1"
    }
  }

  batch {
    streaming {
      generation-interval-sec = 300
      num-executors = 1
      executor-cores = 1
      executor-memory = "500m"
    }
    update-class = "com.cloudera.oryx.app.batch.mllib.rdf.RDFUpdate"
    storage {
      data-dir =  ${hdfs-base}"/data/"
      model-dir = ${hdfs-base}"/model/"
    }
    ui {
      port = 4040
    }
  }
  speed {
    model-manager-class = "com.cloudera.oryx.app.speed.rdf.RDFSpeedModelManager"
    streaming {
      generation-interval-sec = 10
      num-executors = 1
      executor-cores = 1
      executor-memory = "500m"
    }
    ui {
      port = 4041
    }
  }
  serving {
    model-manager-class = "com.cloudera.oryx.app.serving.rdf.model.RDFServingModelManager"
    application-resources = "com.cloudera.oryx.app.serving,com.cloudera.oryx.app.serving.classreg,com.cloudera.oryx.app.serving.rdf"
    api {
      port = 8081
    }
  }

  # This depends on the input data; example is for the Iris data set
  input-schema = {
    feature-names = [ "CNN", "FACEBOOK", "INSTAGRAM", "TWITTER", "NYTIMES", "CEREAL" ]
    categorical-features = [ "CNN", "FACEBOOK", "INSTAGRAM", "TWITTER", "NYTIMES", "CEREAL" ]
    target-feature = "CEREAL"
  }

}
